/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/rgb/examples/HelloEverythingSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace rgb {
namespace examples {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createHelloEverythingSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< HelloEverythingSomeIPProxy>(_address, _connection);
}

void initializeHelloEverythingSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:rgb.examples.HelloEverything:v1_0:rgb.examples.HelloEverythingInstance",
        0x1234, 0x5678, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "rgb.examples.HelloEverything:v1_0",
        &createHelloEverythingSomeIPProxy);
}

INITIALIZER(registerHelloEverythingSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeHelloEverythingSomeIPProxy);
}

HelloEverythingSomeIPProxy::HelloEverythingSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          myTestAttribute_(*this, CommonAPI::SomeIP::eventgroup_id_t(0xa03), CommonAPI::SomeIP::event_id_t(0xa03), CommonAPI::SomeIP::method_id_t(0xa01), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, CommonAPI::SomeIP::method_id_t(0xa02), true, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr)),
          myCustomTestAttribute_(*this, CommonAPI::SomeIP::eventgroup_id_t(0xb03), CommonAPI::SomeIP::event_id_t(0xb03), CommonAPI::SomeIP::method_id_t(0xee9), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, CommonAPI::SomeIP::method_id_t(0xb02), true, static_cast< ::v1::rgb::examples::MyTypes_::MyStructDeployment_t* >(nullptr))
{
}

HelloEverythingSomeIPProxy::~HelloEverythingSomeIPProxy() {
}

HelloEverythingSomeIPProxy::MyTestAttributeAttribute& HelloEverythingSomeIPProxy::getMyTestAttributeAttribute() {
    return myTestAttribute_;
}
HelloEverythingSomeIPProxy::MyCustomTestAttributeAttribute& HelloEverythingSomeIPProxy::getMyCustomTestAttributeAttribute() {
    return myCustomTestAttribute_;
}


void HelloEverythingSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> HelloEverythingSomeIPProxy::getCompletionFuture() {
    return CommonAPI::SomeIP::Proxy::getCompletionFuture();
}

} // namespace examples
} // namespace rgb
} // namespace v1
