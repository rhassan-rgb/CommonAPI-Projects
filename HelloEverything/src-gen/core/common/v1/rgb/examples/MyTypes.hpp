/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_RGB_EXAMPLES_My_Types_HPP_
#define V1_RGB_EXAMPLES_My_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace rgb {
namespace examples {

struct MyTypes {
    struct MyStruct : CommonAPI::Struct< int32_t, bool, double> {
    
        MyStruct()
        {
            std::get< 0>(values_) = 0;
            std::get< 1>(values_) = false;
            std::get< 2>(values_) = 0.0;
        }
        MyStruct(const int32_t &_myInt32, const bool &_myBoolean, const double &_myDouble)
        {
            std::get< 0>(values_) = _myInt32;
            std::get< 1>(values_) = _myBoolean;
            std::get< 2>(values_) = _myDouble;
        }
        inline const int32_t &getMyInt32() const { return std::get< 0>(values_); }
        inline void setMyInt32(const int32_t &_value) { std::get< 0>(values_) = _value; }
        inline const bool &getMyBoolean() const { return std::get< 1>(values_); }
        inline void setMyBoolean(const bool _value) { std::get< 1>(values_) = _value; }
        inline const double &getMyDouble() const { return std::get< 2>(values_); }
        inline void setMyDouble(const double &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const MyStruct& _other) const {
        return (getMyInt32() == _other.getMyInt32() && getMyBoolean() == _other.getMyBoolean() && getMyDouble() == _other.getMyDouble());
        }
        inline bool operator!=(const MyStruct &_other) const {
            return !((*this) == _other);
        }
    
    };


static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "rgb.examples.MyTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct MyTypes

} // namespace examples
} // namespace rgb
} // namespace v1

namespace CommonAPI {
}


namespace std {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_RGB_EXAMPLES_My_Types_HPP_
